use wasm_bindgen::prelude::*;

mod utils;

use fixedbitset::FixedBitSet;
use rand::Rng;
use std::sync::Once;
use utils::init_panic_hook;

static INIT: Once = Once::new();

const OCTET: usize = u8::BITS as usize;

#[wasm_bindgen]
pub struct Universe {
    pub width: u32,
    pub height: u32,
    pub capacity: usize,
    pub cells_count: usize,
    cells: FixedBitSet,
}

#[wasm_bindgen]
#[derive(Clone, Copy)]
#[repr(u8)]
pub enum Seed {
    Empty = 0,
    Random = 1,
    Full = 2,
    Grid = 3,
}

#[wasm_bindgen]
impl Universe {
    pub fn init(width: u32, height: u32, seed: Seed) -> Universe {
        INIT.call_once(|| {
            init_panic_hook();
        });

        let cells_count = (width * height) as usize;
        let mut cells = FixedBitSet::with_capacity(cells_count);
        let mut rng = rand::thread_rng();
        for i in 0..cells_count {
            match seed {
                Seed::Empty => {
                    cells.set(i, false);
                }
                Seed::Random => {
                    cells.set(i, rng.gen::<bool>());
                }
                Seed::Full => {
                    cells.set(i, true);
                }
                Seed::Grid => {
                    cells.set(i, i % 2 == 0 || i % 7 == 0);
                }
            }
        }

        Universe {
            width,
            height,
            cells_count,
            capacity: cells_count / OCTET,
            cells,
        }
    }

    pub fn get_index(&self, row: u32, column: u32) -> usize {
        (row * self.width + column) as usize
    }

    fn live_neighbor_count(&self, row: u32, column: u32) -> u8 {
        let mut count = 0;
        let north = if row == 0 { self.height - 1 } else { row - 1 };
        let south = if row == self.height - 1 { 0 } else { row + 1 };
        let west = if column == 0 {
            self.width - 1
        } else {
            column - 1
        };
        let east = if column == self.width - 1 {
            0
        } else {
            column + 1
        };
        let north_west_index = self.get_index(north, west);
        if self.cells[north_west_index] {
            count += 1;
        }
        let north_index = self.get_index(north, column);
        if self.cells[north_index] {
            count += 1;
        }
        let north_east_index = self.get_index(north, east);
        if self.cells[north_east_index] {
            count += 1;
        }
        let west_index = self.get_index(row, west);
        if self.cells[west_index] {
            count += 1;
        }
        let east_index = self.get_index(row, east);
        if self.cells[east_index] {
            count += 1;
        }
        let south_west_index = self.get_index(south, west);
        if self.cells[south_west_index] {
            count += 1;
        }
        let south_index = self.get_index(south, column);
        if self.cells[south_index] {
            count += 1;
        }
        let south_east_index = self.get_index(south, east);
        if self.cells[south_east_index] {
            count += 1;
        }

        count
    }

    pub fn tick(&mut self) {
        let mut buf = FixedBitSet::with_capacity(self.cells_count);

        for row in 0..self.height {
            for column in 0..self.width {
                let index = self.get_index(row, column);
                let is_enabled = self.cells[index];
                let live_neighbors = self.live_neighbor_count(row, column);
                match (is_enabled, live_neighbors) {
                    (true, x) if x < 2 => buf.set(index, false),
                    (true, 2) | (true, 3) => buf.set(index, true),
                    (true, x) if x > 3 => buf.set(index, false),
                    (false, 3) => buf.set(index, true),
                    _ => (),
                };
            }
        }

        self.cells = buf;
    }

    pub fn cells_ptr(&self) -> *const u8 {
        self.cells.as_slice().as_ptr() as *const u8
    }

    pub fn set_cells(&mut self, cells: &[u8]) {
        let len = self.cells.len();
        'bytes: for (i, byte) in cells.iter().enumerate() {
            for j in 0..OCTET {
                let mask = 0b00000001 << j;
                let bit = byte & mask;
                let is_enabled = bit == mask;
                let index = (i * OCTET + j) as usize;
                if index > len - 1 {
                    break 'bytes;
                }
                self.cells.set(index, is_enabled);
            }
        }
    }

    pub fn set_cell(&mut self, row: u32, column: u32) {
        let index = self.get_index(row, column);
        self.cells.put(index);
    }
}

impl Universe {
    pub fn cells(&self) -> &FixedBitSet {
        &self.cells
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    const WIDTH: u32 = 64;
    const HEIGHT: u32 = 64;
    const SEED: Seed = Seed::Empty;
    const CELLS_COUNT: usize = (WIDTH * HEIGHT) as usize;

    #[test]
    fn universe_capacity() {
        let universe = Universe::init(WIDTH, HEIGHT, SEED);
        assert_eq!(universe.width, WIDTH);
        assert_eq!(universe.height, WIDTH);
        assert_eq!(universe.cells_count, CELLS_COUNT);
        assert_eq!(universe.capacity, (CELLS_COUNT / 8) as usize);
    }
    #[test]
    fn empty_seed() {
        let universe = Universe::init(WIDTH, HEIGHT, SEED);
        for i in 0..universe.cells_count {
            assert!(!universe.cells[i]);
        }
    }

    #[test]
    fn full_seed() {
        let universe = Universe::init(WIDTH, HEIGHT, Seed::Full);
        for i in 0..universe.cells_count {
            assert!(universe.cells[i]);
        }
    }

    #[test]
    fn set_cell() {
        let mut universe = Universe::init(WIDTH, HEIGHT, SEED);

        for i in 0..universe.cells_count {
            let i = i as u32;
            let row = i / universe.height;
            let column = i - row * universe.width;
            universe.set_cell(row, column);
        }

        for i in 0..universe.cells_count {
            assert!(universe.cells[i]);
        }

        let le_bytes_cells: Vec<u8> = universe
            .cells()
            .as_slice()
            .iter()
            .map(|x| x.to_le_bytes())
            .collect::<Vec<[u8; 4]>>()
            .iter()
            .flatten()
            .copied()
            .collect();

        for i in le_bytes_cells[..universe.capacity].iter() {
            assert_eq!(i, &0b11111111);
        }
    }

    #[test]
    fn live_neighbor_count_empty() {
        let universe = Universe::init(WIDTH, HEIGHT, SEED);
        assert_eq!(universe.live_neighbor_count(0, 0), 0);
    }

    #[test]
    fn live_neighbor_count_full() {
        let universe = Universe::init(WIDTH, HEIGHT, Seed::Full);
        assert_eq!(universe.live_neighbor_count(0, 0), 8);
    }

    #[test]
    fn tick() {
        let mut universe = Universe::init(WIDTH, HEIGHT, Seed::Grid);

        let le_bytes_cells = universe
            .cells()
            .as_slice()
            .iter()
            .map(|x| x.to_le_bytes())
            .collect::<Vec<[u8; 4]>>()
            .iter()
            .flatten()
            .copied()
            .collect::<Vec<u8>>();

        assert_eq!(
            &le_bytes_cells[..universe.capacity],
            &vec![
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101, 0b01010101, 0b01110101, 0b01010101, 0b01011101, 0b01010101, 0b01010111,
                0b11010101,
            ]
        );

        universe.tick();

        let le_bytes_cells = universe
            .cells()
            .as_slice()
            .iter()
            .map(|x| x.to_le_bytes())
            .collect::<Vec<[u8; 4]>>()
            .iter()
            .flatten()
            .copied()
            .collect::<Vec<u8>>();

        assert_eq!(
            &le_bytes_cells[..universe.capacity],
            &vec![
                0b00010100, 0b01010100, 0b00000101, 0b01010101, 0b01000001, 0b01010101, 0b01010000,
                0b00010101, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010100,
                0b01010100, 0b00010101, 0b01010101, 0b01000101, 0b01010101, 0b01010001, 0b01010101,
                0b00010100, 0b01010100, 0b00000101, 0b01010101, 0b01000001, 0b01010101, 0b01010000,
                0b00010101,
            ]
        );

        universe.tick();

        let le_bytes_cells = universe
            .cells()
            .as_slice()
            .iter()
            .map(|x| x.to_le_bytes())
            .collect::<Vec<[u8; 4]>>()
            .iter()
            .flatten()
            .copied()
            .collect::<Vec<u8>>();

        assert_eq!(
            &le_bytes_cells[..universe.capacity],
            &vec![
                0b00110100, 0b01010100, 0b00001101, 0b01010101, 0b01000011, 0b11010101, 0b01010000,
                0b00110101, 0b10010100, 0b01000100, 0b00100101, 0b01010001, 0b01001001, 0b01010100,
                0b00010010, 0b10010101, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010010,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b10010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010000, 0b01010000,
                0b00010100, 0b00010100, 0b00000101, 0b01000101, 0b01000001, 0b01010001, 0b10010010,
                0b01010100, 0b00100100, 0b00010101, 0b01001001, 0b01000101, 0b01010010, 0b10010001,
                0b00010110, 0b01010110, 0b10000101, 0b01010101, 0b01100001, 0b01010101, 0b01011000,
                0b00010101,
            ]
        );
    }
}
